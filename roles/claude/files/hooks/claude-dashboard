#!/usr/bin/env bash

# Hook-based session switcher that reads status from files

STATUS_DIR="$HOME/.cache/claude-status"

# Cache for ps output to avoid repeated calls
_PS_CACHE=""
_PS_CACHE_TIME=0

# Function to check if Claude is in a session (actually running, not just has status file)
has_claude_in_session() {
  local session="$1"

  # Cache ps output for 1 second to avoid repeated calls
  local current_time=$(date +%s)
  if [ $((current_time - _PS_CACHE_TIME)) -gt 1 ]; then
    _PS_CACHE=$(ps aux | grep -v grep | grep "claude")
    _PS_CACHE_TIME=$current_time
  fi

  # Early return if no claude processes at all
  [ -z "$_PS_CACHE" ] && return 1

  # Check all panes in the session for claude processes
  while IFS=: read -r pane_id pane_tty; do
    # Convert /dev/ttys004 to s004 format for ps matching
    local tty_short=$(echo "$pane_tty" | sed 's|/dev/tty||')
    # Check if there are any claude processes on this tty
    if echo "$_PS_CACHE" | grep -q " $tty_short "; then
      return 0 # Found Claude process
    fi
  done < <(tmux list-panes -t "$session" -F "#{pane_id}:#{pane_tty}" 2>/dev/null)

  return 1 # No Claude process found
}

# Function to get Claude status from hook files
get_claude_status() {
  local session="$1"
  local status_file="$STATUS_DIR/${session}.status"

  if [ -f "$status_file" ]; then
    # Read status from file (should be "working" or "done")
    cat "$status_file" 2>/dev/null || echo ""
  else
    echo ""
  fi
}

# Get all sessions with formatted output
get_sessions_with_status() {
  local working_sessions=()
  local done_sessions=()
  local no_claude_sessions=()

  # Collect all sessions into arrays
  while IFS=: read -r name windows attached; do
    local formatted_line=""

    # First check if Claude is present
    if has_claude_in_session "$name"; then
      # Get status from hook file
      local claude_status=$(get_claude_status "$name")

      # Default to "done" if no status file exists
      [ -z "$claude_status" ] && claude_status="done"

      if [ "$claude_status" = "working" ]; then
        formatted_line=$(printf "%-20s %2s windows %-12s \033[38;5;208m⚡ working\033[0m" "$name" "$windows" "$attached")
        working_sessions+=("$formatted_line")
      else
        formatted_line=$(printf "%-20s %2s windows %-12s \033[32m✓ done\033[0m" "$name" "$windows" "$attached")
        done_sessions+=("$formatted_line")
      fi
    else
      formatted_line=$(printf "%-20s %2s windows %-12s" "$name" "$windows" "$attached")
      no_claude_sessions+=("$formatted_line")
    fi
  done < <(tmux list-sessions -F "#{session_name}:#{session_windows}:#{?session_attached,(attached),}")

  # Output grouped sessions with separators

  # Working sessions
  if [ ${#working_sessions[@]} -gt 0 ]; then
    echo -e "\033[1;33m━━━ ⚡ WORKING ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    printf '%s\n' "${working_sessions[@]}"
  fi

  # Done sessions
  if [ ${#done_sessions[@]} -gt 0 ]; then
    [ ${#working_sessions[@]} -gt 0 ] && echo
    echo -e "\033[1;32m━━━ ✓ DONE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    printf '%s\n' "${done_sessions[@]}"
  fi

  # No Claude sessions
  if [ ${#no_claude_sessions[@]} -gt 0 ]; then
    [ ${#working_sessions[@]} -gt 0 ] || [ ${#done_sessions[@]} -gt 0 ] && echo
    echo -e "\033[1;90m━━━ NO CLAUDE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    printf '%s\n' "${no_claude_sessions[@]}"
  fi
}

# Main
sessions=$(get_sessions_with_status)

# Use fzf to select with vim keybindings
selected=$(echo "$sessions" | fzf \
  --ansi \
  --no-sort \
  --header="Sessions grouped by Claude status | j/k: navigate | Enter: select | Esc: cancel" \
  --prompt="Session> " \
  --bind="j:down,k:up,q:cancel" \
  --layout=reverse \
  --info=inline)

# Switch to selected session (skip separator lines)
if [ -n "$selected" ] && ! echo "$selected" | grep -q "━━━"; then
  session_name=$(echo "$selected" | awk '{print $1}')
  tmux switch-client -t "$session_name"
fi
