---
# NPM/Node.js installation with user-local fallback for Ubuntu/Debian

- name: "NPM | {{ ansible_distribution }} | Get latest STABLE NodeJS version"
  ansible.builtin.shell:
    cmd: curl -sL https://nodejs.org/dist/index.json | jq -r '.[] | select(.lts) | .version' | head -n 1
  register: nodejs_latest_version
  changed_when: false

- name: "NPM | {{ ansible_distribution }} | Check if NodeJS is installed"
  ansible.builtin.command: node --version
  register: nodejs_installed
  failed_when: false
  changed_when: false

- name: "NPM | {{ ansible_distribution }} | Show NodeJS versions"
  ansible.builtin.debug:
    msg: |
      Current NodeJS: {{ nodejs_installed.stdout if nodejs_installed.rc == 0 else 'Not installed' }}
      Latest LTS: {{ nodejs_latest_version.stdout }}
      Installation needed: {{ nodejs_installed.rc != 0 or nodejs_installed.stdout != nodejs_latest_version.stdout }}

# System-wide installation with sudo
- name: "NPM | {{ ansible_distribution }} | System installation"
  when:
    - can_install_packages | default(false)
    - nodejs_installed.rc != 0 or nodejs_installed.stdout != nodejs_latest_version.stdout
  become: true
  block:
    - name: "NPM | Get System Arch"
      ansible.builtin.set_fact:
        nodejs_arch: "{{ ansible_machine | replace('x86_64', 'x64') | replace('aarch64', 'arm64') }}"

    - name: "NPM | Register Package Name"
      ansible.builtin.set_fact:
        nodejs_package_name: "node-{{ nodejs_latest_version.stdout }}-{{ ansible_system | lower }}-{{ nodejs_arch }}"

    - name: "NPM | Download NodeJS"
      ansible.builtin.get_url:
        url: "https://nodejs.org/dist/{{ nodejs_latest_version.stdout }}/{{ nodejs_package_name }}.tar.xz"
        dest: /tmp/{{ nodejs_package_name }}.tar.xz
        mode: "0644"

    - name: "NPM | Extract and install NodeJS (system-wide)"
      ansible.builtin.unarchive:
        src: /tmp/{{ nodejs_package_name }}.tar.xz
        dest: /usr/local
        remote_src: true
        extra_opts: "--strip-components=1"
      register: npm_system_install

# User-local installation without sudo
- name: "NPM | {{ ansible_distribution }} | User-local installation"
  when:
    - not (can_install_packages | default(false))
    - nodejs_installed.rc != 0 or nodejs_installed.stdout != nodejs_latest_version.stdout
  block:
    - name: "NPM | Create local directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ ansible_env.HOME }}/.local"
        - "{{ ansible_env.HOME }}/.local/bin"
        - "{{ ansible_env.HOME }}/.local/lib"
        - "{{ ansible_env.HOME }}/.npm-global"

    - name: "NPM | Get System Arch"
      ansible.builtin.set_fact:
        nodejs_arch: "{{ ansible_machine | replace('x86_64', 'x64') | replace('aarch64', 'arm64') }}"

    - name: "NPM | Register Package Name"
      ansible.builtin.set_fact:
        nodejs_package_name: "node-{{ nodejs_latest_version.stdout }}-{{ ansible_system | lower }}-{{ nodejs_arch }}"

    - name: "NPM | Download NodeJS"
      ansible.builtin.get_url:
        url: "https://nodejs.org/dist/{{ nodejs_latest_version.stdout }}/{{ nodejs_package_name }}.tar.xz"
        dest: /tmp/{{ nodejs_package_name }}.tar.xz
        mode: "0644"

    - name: "NPM | Extract NodeJS to user directory"
      ansible.builtin.unarchive:
        src: /tmp/{{ nodejs_package_name }}.tar.xz
        dest: "{{ ansible_env.HOME }}/.local"
        remote_src: true
        extra_opts: "--strip-components=1"
      register: npm_user_install

    - name: "NPM | Configure npm for user-local packages"
      ansible.builtin.shell: |
        export PATH="${HOME}/.local/bin:${PATH}"
        npm config set prefix '{{ ansible_env.HOME }}/.npm-global'
      args:
        executable: /bin/bash
      when: npm_user_install is succeeded

# Configure NPM regardless of installation method
- name: "NPM | {{ ansible_distribution }} | Configure NPM"
  when: nodejs_installed.rc == 0 or npm_system_install is defined or npm_user_install is defined
  block:
    - name: "NPM | Set global package directory for non-sudo"
      ansible.builtin.command: npm config set prefix '{{ ansible_env.HOME }}/.npm-global'
      when: not (can_install_packages | default(false))

    - name: "NPM | Create .npmrc with useful defaults"
      ansible.builtin.copy:
        content: |
          # NPM Configuration
          {% if not can_install_packages | default(false) %}
          prefix={{ ansible_env.HOME }}/.npm-global
          {% endif %}
          init-author-name={{ git_user_name | default('') }}
          init-license=MIT
          save-exact=true
        dest: "{{ ansible_env.HOME }}/.npmrc"
        mode: '0644'

# Install global packages with appropriate method
- name: "NPM | {{ ansible_distribution }} | Install global packages"
  when: nodejs_installed.rc == 0 or npm_system_install is defined or npm_user_install is defined
  block:
    - name: "NPM | Install global packages (with sudo)"
      community.general.npm:
        name: "{{ item }}"
        global: true
      with_items:
        - yarn
        - pnpm
        - npm-check-updates
      when: can_install_packages | default(false)
      become: true

    - name: "NPM | Install global packages (user-local)"
      ansible.builtin.shell: |
        export PATH="${HOME}/.local/bin:${HOME}/.npm-global/bin:${PATH}"
        npm install -g {{ item }}
      args:
        executable: /bin/bash
      with_items:
        - yarn
        - pnpm
        - npm-check-updates
      when: not (can_install_packages | default(false))

# Report installation status
- name: "NPM | {{ ansible_distribution }} | Report installation status"
  ansible.builtin.debug:
    msg: |
      NPM/Node.js installation status:
      - Previously installed: {{ '✓' if nodejs_installed.rc == 0 else '✗' }}
      - System installation: {{ '✓' if npm_system_install is defined and npm_system_install is succeeded else '✗ (no sudo)' if not can_install_packages else 'N/A' }}
      - User installation: {{ '✓' if npm_user_install is defined and npm_user_install is succeeded else 'N/A' }}
      - NPM prefix: {{ '~/.npm-global' if not can_install_packages else '/usr/local (system-wide)' }}

      {% if not can_install_packages %}
      ⚠️  User-local installation notes:
      1. Add to your PATH: export PATH="${HOME}/.local/bin:${HOME}/.npm-global/bin:${PATH}"
      2. Global packages will be installed to: ~/.npm-global
      3. This is already configured in your shell if using the zsh role
      {% endif %}
