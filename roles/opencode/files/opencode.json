{
  "$schema": "https://opencode.ai/config.json",
  "autoupdate": true,
  "model": "anthropic/claude-sonnet-4-20250514",
  "permission": {
    "bash": {
      "*": "allow",
      "sudo *": "deny",
      "su *": "deny",
      "passwd *": "deny",
      "shutdown *": "deny",
      "reboot *": "deny",
      "halt *": "deny",
      "poweroff *": "deny",
      "systemctl reboot": "deny",
      "systemctl poweroff": "deny",
      "systemctl halt": "deny",
      "rm -rf /": "deny",
      "rm -rf /*": "deny",
      "dd if=/dev/zero of=/dev/*": "deny",
      "mkfs *": "deny",
      "fdisk *": "deny",
      "parted *": "deny",
      "git commit *": "deny",
      "git push *": "deny",
      "git merge *": "deny",
      "git rebase *": "deny",
      "git reset *": "deny",
      "git revert *": "deny",
      "git cherry-pick *": "deny",
      "git tag *": "deny",
      "chmod 777 *": "deny",
      "chown root *": "deny"
    },
    "edit": "allow",
    "webfetch": "allow"
  },
  "command": {
    "gh-work": {
      "template": "Complete GitHub issue workflow: view issue, create branch, implement fix, test, commit, and create PR.\n\nRun: !`~/.config/opencode/scripts/gh-work-issue.sh $ARGUMENTS`\n\nAfter the script completes, analyze the issue details and implement the complete fix following this workflow:\n\n1. Review issue requirements and acceptance criteria\n2. Search codebase for relevant files\n3. Implement the fix with proper testing\n4. Run tests and linting\n5. Commit with conventional format referencing the issue\n6. Create PR with summary and test plan",
      "description": "Fix GitHub issue end-to-end"
    },
    "gh-issue": {
      "template": "Create a GitHub issue based on current context.\n\nAnalyze the conversation and generate:\n1. Concise title (50 chars max)\n2. Detailed body with:\n   - Summary\n   - Context from conversation\n   - Acceptance criteria\n   - Technical details\n\nThen execute:\n!`~/.config/opencode/scripts/gh-create-issue.sh \"<generated-title>\" --body \"<generated-body>\" $ARGUMENTS`\n\nIf first argument is a number or org/repo#num format, treat as parent issue.",
      "description": "Create GitHub issue"
    },
    "gh-review": {
      "template": "AI-powered code review for GitHub PR.\n\nFetch PR data: !`~/.config/opencode/scripts/gh-ai-review.sh \"$ARGUMENTS\"`\n\nProvide comprehensive analysis:\n\nüìä **Change Summary**\n‚úÖ **Strengths**\nüîç **Code Review Findings**:\n  - üêõ Bugs/Issues (with severity)\n  - üéØ Suggestions (with code examples)\n  - ‚ùì Questions for clarification\nüö¶ **CI/CD Status**\nüìù **Recommended Actions**\n\nFocus on: code quality, bugs, security, performance, best practices, testing.",
      "description": "AI-powered PR review"
    },
    "gh-link": {
      "template": "Link a child issue to a parent issue.\n\nUsage: /gh-link <parent-issue> <child-issue>\n\nExecute: !`~/.config/opencode/scripts/gh-link-sub-issue.sh $ARGUMENTS`",
      "description": "Link GitHub issues"
    },
    "prp-init": {
      "template": "Initialize a feature file through interactive interrogation and codebase analysis for: $ARGUMENTS\n\nSee detailed workflow in command markdown.",
      "description": "Initialize feature file"
    },
    "prp-build": {
      "template": "Build a comprehensive PRP from feature file: $ARGUMENTS\n\nConduct research, gather context, and create implementation blueprint.\n\nSee detailed workflow in command markdown.",
      "description": "Build PRP from feature file"
    },
    "prp-execute": {
      "template": "Execute PRP file: $ARGUMENTS\n\nLoad context, ULTRATHINK, implement with validation, and track progress.\n\nSee detailed workflow in command markdown.",
      "description": "Execute PRP implementation"
    },
    "spec-init": {
      "template": "Initialize specification-driven feature using SPARC methodology for: $ARGUMENTS\n\nCreate comprehensive spec with requirements, architecture, and validation gates.\n\nSee detailed workflow in command markdown.",
      "description": "Initialize SPARC specification"
    },
    "spec-implement": {
      "template": "Implement feature from architecture: $ARGUMENTS\n\nTest-driven development with continuous validation and checkpoint tracking.\n\nSee detailed workflow in command markdown.",
      "description": "Implement SPARC feature with TDD"
    }
  }
}
