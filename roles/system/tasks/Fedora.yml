---
# System configuration for Fedora/RHEL

# DNF Performance Optimizations
- name: "System | {{ ansible_distribution }} | Optimize DNF configuration"
  ansible.builtin.lineinfile:
    path: /etc/dnf/dnf.conf
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
    create: true
  loop:
    - { key: "max_parallel_downloads", value: "10" }
    - { key: "fastestmirror", value: "True" }
    - { key: "deltarpm", value: "True" }
    - { key: "keepcache", value: "False" }  # Don't keep downloaded packages
    - { key: "install_weak_deps", value: "False" }
    - { key: "clean_requirements_on_remove", value: "True" }
    - { key: "skip_if_unavailable", value: "True" }
    - { key: "defaultyes", value: "True" }
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Update DNF cache"
  ansible.builtin.dnf:
    update_cache: true
  become: true
  when: 
    - can_install_packages | default(false)
    - system_update_packages | default(false)
  register: system_update_result

- name: "System | {{ ansible_distribution }} | Install system utilities"
  ansible.builtin.dnf:
    name:
      - jq
      - iscsi-initiator-utils  # Fedora equivalent of open-iscsi
      - dnf-automatic  # For automatic updates
      - dnf-plugins-core
      - util-linux  # For various system utilities
      - cronie  # Cron daemon
      - mlocate  # For updatedb command
    state: present
  become: true
  when: can_install_packages | default(false)
  register: system_install_result

# System Performance Tweaks
- name: "System | {{ ansible_distribution }} | Disable unnecessary services"
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop:
    - ModemManager.service  # Not needed unless using mobile broadband
  become: true
  when: 
    - can_install_packages | default(false)
  failed_when: false  # Don't fail if service doesn't exist

- name: "System | {{ ansible_distribution }} | Configure systemd journal size limit"
  ansible.builtin.lineinfile:
    path: /etc/systemd/journald.conf
    regexp: "^#?SystemMaxUse="
    line: "SystemMaxUse=500M"
    create: true
    backup: true
  become: true
  when: can_install_packages | default(false)
  notify: restart systemd-journald

- name: "System | {{ ansible_distribution }} | Set swappiness for better performance"
  ansible.posix.sysctl:
    name: vm.swappiness
    value: '10'
    state: present
    reload: true
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Configure dnf-automatic for security updates"
  ansible.builtin.copy:
    content: |
      [commands]
      upgrade_type = security
      random_sleep = 3600
      download_updates = yes
      apply_updates = yes
      
      [emitters]
      emit_via = stdio
      
      [email]
      email_from = dnf-automatic@{{ ansible_hostname }}
      
      [command]
      
      [command_email]
    dest: /etc/dnf/automatic.conf
    backup: true
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Enable dnf-automatic timer"
  ansible.builtin.systemd:
    name: dnf-automatic.timer
    enabled: true
    state: started
  become: true
  when: can_install_packages | default(false)

# Automatic Maintenance Tasks
- name: "System | {{ ansible_distribution }} | Create system cleanup script"
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Fedora system cleanup script
      
      # Clean DNF cache
      dnf clean all
      
      # Remove old kernels (keep last 2)
      dnf remove -y $(dnf repoquery --installonly --latest-limit=-2 -q)
      
      # Clean journal logs older than 7 days
      journalctl --vacuum-time=7d
      
      # Clean temporary files
      find /tmp -type f -atime +10 -delete 2>/dev/null
      find /var/tmp -type f -atime +10 -delete 2>/dev/null
      
      # Update mlocate database
      updatedb
    dest: /usr/local/bin/fedora-cleanup
    mode: '0755'
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Enable cron service"
  ansible.builtin.systemd:
    name: crond
    enabled: true
    state: started
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Schedule weekly cleanup"
  ansible.builtin.cron:
    name: "Fedora system cleanup"
    minute: "0"
    hour: "3"
    weekday: "0"  # Sunday
    job: "/usr/local/bin/fedora-cleanup > /var/log/fedora-cleanup.log 2>&1"
    user: root
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Configure ZRAM for better memory management"
  ansible.builtin.dnf:
    name: zram-generator
    state: present
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Configure ZRAM settings"
  ansible.builtin.copy:
    content: |
      [zram0]
      zram-size = min(ram / 2, 4096)
      compression-algorithm = zstd
    dest: /etc/systemd/zram-generator.conf
    backup: true
  become: true
  when: can_install_packages | default(false)
  notify: restart systemd-zram-setup@zram0

- name: "System | {{ ansible_distribution }} | Enable Passwordless Sudo"
  ansible.builtin.template:
    src: user-sudo.j2
    dest: /etc/sudoers.d/{{ ansible_env['USER'] }}
    mode: "0440"
    validate: 'visudo -cf %s'
  become: true
  when: can_install_packages | default(false)

- name: "System | {{ ansible_distribution }} | Check for missing packages (no sudo)"
  when: not (can_install_packages | default(false))
  block:
    - name: "System | Check if jq is installed"
      ansible.builtin.command: which jq
      register: jq_check
      changed_when: false
      failed_when: false

    - name: "System | Report missing packages"
      ansible.builtin.debug:
        msg: |
          ⚠️  Cannot install system packages without sudo access.
          
          Missing packages that should be installed:
          {{ '- jq' if jq_check.rc != 0 else '' }}
          
          Please ask your system administrator to install these packages:
          - jq (JSON processor)
          - iscsi-initiator-utils (iSCSI support)

# WSL-specific win32yank installation
- name: System | Detecting win32yank
  ansible.builtin.stat:
    path: /usr/local/bin/win32yank.exe
  register: win32yank_installed
  when: ansible_host_environment_is_wsl

- name: "System | Install win32yank.exe"
  when:
    - ansible_host_environment_is_wsl
    - not win32yank_installed.stat.exists
  block:
    - name: Download win32yank zip
      ansible.builtin.get_url:
        url: https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip
        dest: /tmp/win32yank.zip
        mode: "0755"

    - name: System | Unzip win32yank.exe
      ansible.builtin.unarchive:
        src: /tmp/win32yank.zip
        dest: /tmp
        mode: "0755"

    - name: System | Copy win32yank into path
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/win32yank.exe
        dest: /usr/local/bin/win32yank.exe
        mode: "0755"
      become: true
      when: can_install_packages | default(false)

    - name: System | Copy win32yank to user directory (no sudo)
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/win32yank.exe
        dest: "{{ ansible_env.HOME }}/.local/bin/win32yank.exe"
        mode: "0755"
      when: not (can_install_packages | default(false))

    - name: System | Remove tmp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/win32yank.zip
        - /tmp/win32yank.exe

- name: "System | {{ ansible_distribution }} | Report installation status"
  ansible.builtin.debug:
    msg:
      - "System configuration status:"
      - "- Package update: {{ '✓' if system_update_result is defined and system_update_result is succeeded else 'Skipped (no sudo)' }}"
      - "- Utilities installed: {{ '✓' if system_install_result is defined and system_install_result is succeeded else 'Skipped (no sudo)' }}"
      - "- WSL win32yank: {{ 'Installed' if ansible_host_environment_is_wsl and win32yank_installed.stat.exists else 'N/A' }}"
      - "- DNF optimizations: {{ '✓ Applied' if can_install_packages | default(false) else 'Skipped (no sudo)' }}"
      - "- Performance tweaks: {{ '✓ Applied' if can_install_packages | default(false) else 'Skipped (no sudo)' }}"
      - "- Automatic maintenance: {{ '✓ Configured' if can_install_packages | default(false) else 'Skipped (no sudo)' }}"