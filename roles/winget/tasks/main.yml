---
- name: Confirm winget.exe is installed
  ansible.windows.win_package:
    name: winget
    state: present
  register: winget_installed
  failed_when: winget_installed is not defined
  ignore_errors: true

- name: Install Winget Package Manager
  ansible.builtin.shell: |
    $hasPackageManager = Get-AppPackage -name "Microsoft.DesktopAppInstaller"
    if (-Not($hasPackageManager)) {
      $releases_url = "https://api.github.com/repos/microsoft/winget-cli/releases/latest"
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $releases = Invoke-RestMethod -uri "$($releases_url)"
      $latestRelease = $releases.assets | Where { $_.browser_download_url.EndsWith("msixbundle") } | Select -First 1
      Add-AppxPackage -Path $latestRelease.browser_download_url
    } else {
      $false
    }
  register: install_winget_result
  changed_when: install_winget_result.stdout != 'False'
  args:
    executable: powershell.exe

- name: Install dependencies packages from winget
  ansible.builtin.shell: |
    $OriginallyNotInstalled = [bool](winget list {{ item }})[-1].Contains('No installed package')
    If ($OriginallyNotInstalled) {
      winget install {{ item }}
      $IsNotInstalled = [bool](winget list {{ item }})[-1].Contains('No installed package')
      If ($IsNotInstalled) {
        $Ansible.Failed = $true
      }
    } else {
      $false
    }
  args:
    executable: powershell.exe
  register: winget_install_result
  changed_when: winget_install_result.stdout != 'False'
  loop: "{{ winget_packages }}"
  when: winget_packages is defined
