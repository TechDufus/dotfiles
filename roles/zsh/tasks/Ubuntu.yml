---
# Zsh installation with intelligent fallback for Ubuntu/Debian

- name: "Zsh | {{ ansible_distribution }} | Check if zsh is already installed"
  ansible.builtin.command: which zsh
  register: zsh_check
  changed_when: false
  failed_when: false
  no_log: true

- name: "Zsh | {{ ansible_distribution }} | Get current shell"
  ansible.builtin.command: echo $SHELL
  register: current_shell
  changed_when: false

# System-wide installation with sudo
- name: "Zsh | {{ ansible_distribution }} | System installation"
  when:
    - can_install_packages | default(false)
  block:
    - name: "Zsh | Install Zsh (system package)"
      ansible.builtin.package:
        name: zsh
        state: present
      become: true
      register: zsh_system_install
      when: zsh_check.rc != 0

    - name: "Zsh | Set as default shell (requires sudo)"
      ansible.builtin.user:
        name: "{{ host_user }}"
        shell: /usr/bin/zsh
      become: true
      when:
        - zsh_check.rc == 0 or zsh_system_install is succeeded
        - '"/zsh" not in current_shell.stdout'
      register: zsh_shell_change

# User-local installation without sudo
- name: "Zsh | {{ ansible_distribution }} | User-local installation"
  when:
    - not (can_install_packages | default(false))
    - zsh_check.rc != 0
  block:
    - name: "Zsh | Create local directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ ansible_env.HOME }}/.local/bin"
        - "{{ ansible_env.HOME }}/.local/src"

    - name: "Zsh | Check for build dependencies"
      ansible.builtin.command: "which {{ item }}"
      register: build_deps_check
      loop:
        - gcc
        - make
        - autoconf
      changed_when: false
      failed_when: false
      no_log: true

    - name: "Zsh | Manual installation instructions"
      ansible.builtin.debug:
        msg: |
          ⚠️  Zsh is not installed and sudo is not available.

          To install zsh manually:

          Option 1 - Build from source (if you have gcc/make):
          ```bash
          cd ~/.local/src
          wget https://github.com/zsh-users/zsh/releases/download/zsh-5.9/zsh-5.9.tar.xz
          tar xf zsh-5.9.tar.xz
          cd zsh-5.9
          ./configure --prefix=$HOME/.local
          make && make install
          ```

          Option 2 - Use a pre-built binary:
          - Check if your system has a portable zsh available
          - Or request your administrator to install zsh

          Option 3 - Continue using your current shell:
          - Current shell: {{ current_shell.stdout }}
          - Zsh configurations will be installed but inactive

# Configure zsh regardless of installation method
- name: "Zsh | {{ ansible_distribution }} | Configure zsh"
  block:
    - name: "Zsh | Create config directory"
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/zsh"
        state: directory
        mode: '0755'

    - name: "Zsh | Deploy .zshrc"
      ansible.builtin.copy:
        src: ".zshrc"
        dest: "{{ ansible_env.HOME }}/.zshrc"
        mode: '0644'
        backup: yes

    - name: "Zsh | Check if we need to update PATH for local install"
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        line: 'export PATH="$HOME/.local/bin:$PATH"'
        state: present
      when: not (can_install_packages | default(false))

# Report installation status
- name: "Zsh | {{ ansible_distribution }} | Report installation status"
  ansible.builtin.debug:
    msg: |
      Zsh installation status:
      - Previously installed: {{ '✓' if zsh_check.rc == 0 else '✗' }}
      - System installation: {{ '✓' if zsh_system_install is defined and zsh_system_install is succeeded else '✗ (no sudo)' if not can_install_packages else 'N/A' }}
      - Default shell changed: {{ '✓' if zsh_shell_change is defined and zsh_shell_change is succeeded else '✗ (requires sudo)' if not can_install_packages else 'No change needed' }}
      - Configuration files: ✓ Deployed to home directory
      - Current shell: {{ current_shell.stdout }}

      {% if not can_install_packages and zsh_check.rc != 0 %}
      Note: To use zsh after manual installation:
      1. Add ~/.local/bin to your PATH
      2. Run: chsh -s $(which zsh) (if chsh is available)
      3. Or ask your administrator to change your default shell
      {% endif %}
